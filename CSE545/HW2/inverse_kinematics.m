function thetad = inverse_kinematics(u)% performs inverse kinematics computations with various methods% Stefan Schaal, March 2009% split the input u into meaningful quantities%u=[pi/4 pi/6 pi/9 pi/18 10 10 2 2 2 2]';n = (length(u)-2)/2;theta = u(1:n);xd    = u(n+1:n+2);links = u(n+3:end);assignin('base','theta',theta);n = length(theta);m = length(xd);% NOTE: insert your Jacobian calculation here% 1-f)p0=[0;0;0];p1=[links(1)*cos(theta(1));links(1)*sin(theta(1));0];p2=[links(1)*cos(theta(1))+links(2)*cos(theta(1)+theta(2));links(1)*sin(theta(1))+links(2)*sin(theta(1)+theta(2));0];p3=[links(1)*cos(theta(1))+links(2)*cos(theta(1)+theta(2))+links(3)*cos(theta(1)+theta(2)+theta(3));    links(1)*sin(theta(1))+links(2)*sin(theta(1)+theta(2))+links(3)*sin(theta(1)+theta(2)+theta(3));    0];p4=[links(1)*cos(theta(1))+links(2)*cos(theta(1)+theta(2))+links(3)*cos(theta(1)+theta(2)+theta(3))+links(4)*cos(theta(1)+theta(2)+theta(3)+theta(4));    links(1)*sin(theta(1))+links(2)*sin(theta(1)+theta(2))+links(3)*sin(theta(1)+theta(2)+theta(3))+links(4)*sin(theta(1)+theta(2)+theta(3)+theta(4));    0];Z=[0;0;1];J4=[cross(Z,p4-p0) cross(Z,p4-p1) cross(Z,p4-p2) cross(Z,p4-p3)];J3=[cross(Z,p3-p0) cross(Z,p3-p1) cross(Z,p3-p2) zeros(3,1)];J2=[cross(Z,p2-p0) cross(Z,p2-p1) zeros(3,1) zeros(3,1)];J1=[cross(Z,p1-p0) zeros(3,1) zeros(3,1) zeros(3,1)];JP=0.25*(J4+J3+J2+J1);JP=JP(1:2,:);% convert cartesian velocities into joint velocities% NOTE: insert the required inverse kinematics methods at this%       location% 1-g)% alpha=2;% thetad = alpha*JP'*xd;% 1-h)% alpha=0.5;% thetad = alpha*JP'*pinv(JP*JP')*xd;% 1-i)% alpha=0.5;% J_sharp=JP'*pinv(JP*JP');% thetad = alpha*J_sharp*xd+(eye(4)-J_sharp*JP)*([0.5;0.5;0.5;0.5]-theta);% 1-j)% alpha=0.1;% weight=[0.1,0.2,0.3,0.5];% wMat=diag(weight,0);% assignin('base','JP',JP);% assignin('base','xd',xd);% assignin('base','alpha',alpha);% % thetad = alpha* pinv(wMat)*JP'*pinv(JP*JP')*xd;% 1-k)alpha=0.1;weight=[0.1,0.2,0.3,0.5];wMat=diag(weight,0);assignin('base','JP',JP);assignin('base','xd',xd);assignin('base','alpha',alpha);J_sharp=JP'*pinv(JP*JP');thetad = alpha* pinv(wMat)* J_sharp*xd+pinv(wMat)*(eye(4)-J_sharp*JP)*([0.5;0.5;0.5;0.5]-theta);